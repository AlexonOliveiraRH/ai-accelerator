apiVersion: batch/v1
kind: Job
metadata:
  labels:
    app.kubernetes.io/component: minio
    app.kubernetes.io/instance: minio
    app.kubernetes.io/name: minio
    app.kubernetes.io/part-of: minio
    component: minio
  name: create-minio-buckets
  namespace: ai-example-single-model-serving
spec:
  selector: {}
  template:
    metadata:
      labels:
        app.kubernetes.io/component: minio
        app.kubernetes.io/instance: minio
        app.kubernetes.io/name: minio
        app.kubernetes.io/part-of: minio
        component: minio
    spec:
      containers:
      - name: create-buckets
        image: image-registry.openshift-image-registry.svc:5000/redhat-ods-applications/s2i-generic-data-science-notebook:2023.1
        imagePullPolicy: IfNotPresent
        command:
          - /bin/bash
        env:
          - name: BUCKETNAME
            value: "single-model-bucket"
        envFrom:
          - secretRef:
              name: single-model-serving-ds-connection
        args:
          - -ec
          - |-
            env | grep AWS_
            python3 /scripts/create-bucket.py
        volumeMounts:
            - name: scripts
              mountPath: /scripts
      volumes:
        - name: scripts
          configMap:
            name: create-bucket-script
            defaultMode: 0755
      initContainers:
        - args:
            - -ec
            - |-
              echo -n 'Waiting for minio root user secret'
              while ! oc get secret single-model-serving-ds-connection 2>/dev/null | grep -qF single-model-serving-ds-connection; do
              echo -n .
              sleep 5
              done; echo
          command:
            - /bin/bash
          image: image-registry.openshift-image-registry.svc:5000/openshift/tools:latest
          imagePullPolicy: IfNotPresent
          name: wait-for-minio
      restartPolicy: Never
      serviceAccount: demo-setup
      serviceAccountName: demo-setup
