apiVersion: v1
kind: ServiceAccount
metadata:
  name: demo-setup
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: demo-setup-edit
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: edit
subjects:
  - kind: ServiceAccount
    name: demo-setup
    namespace: ai-example-single-model-serving
---
apiVersion: batch/v1
kind: Job
metadata:
  name: create-ds-connections
spec:
  selector: {}
  template:
    spec:
      containers:
        - args:
            - -ec
            - |-
              echo -n 'Waiting for minio route'
              while ! oc get route minio-api -n ai-example-training 2>/dev/null | grep -qF minio; do
                echo -n .
                sleep 5
              done; echo

              echo -n 'Waiting for minio root user secret'
              while ! oc get secret minio -n ai-example-training 2>/dev/null | grep -qF minio; do
                echo -n .
                sleep 5
              done; echo

              MINIO_ROOT_USER=$(oc get secret minio -n ai-example-training -o template --template '{{.data.minio_root_user}}')
              MINIO_ROOT_PASSWORD=$(oc get secret minio -n ai-example-training -o template --template '{{.data.minio_root_password}}')
              MINIO_HOST=https://$(oc get route minio-api -n ai-example-training -o template --template '{{.spec.host}}')

              cat << EOF | oc apply -f-
              apiVersion: v1
              kind: Secret
              metadata:
                annotations:
                  opendatahub.io/connection-type: s3
                  openshift.io/display-name: single-model-serving-ds-connection
                labels:
                  opendatahub.io/dashboard: "true"
                  opendatahub.io/managed: "true"
                name: single-model-serving-ds-connection
              data:
                AWS_ACCESS_KEY_ID: ${MINIO_ROOT_USER}
                AWS_SECRET_ACCESS_KEY: ${MINIO_ROOT_PASSWORD}
              stringData:
                AWS_DEFAULT_REGION: us-east-1
                AWS_S3_BUCKET: single-model-bucket
                AWS_S3_ENDPOINT: ${MINIO_HOST}
              type: Opaque
              EOF
          command:
            - /bin/bash
          image: image-registry.openshift-image-registry.svc:5000/openshift/tools:latest
          imagePullPolicy: IfNotPresent
          name: create-ds-connections
      restartPolicy: Never
      serviceAccount: demo-setup
      serviceAccountName: demo-setup
---
apiVersion: batch/v1
kind: Job
metadata:
  labels:
    app.kubernetes.io/component: minio
    app.kubernetes.io/instance: minio
    app.kubernetes.io/name: minio
    app.kubernetes.io/part-of: minio
    component: minio
  name: create-minio-buckets
spec:
  selector: {}
  template:
    metadata:
      labels:
        app.kubernetes.io/component: minio
        app.kubernetes.io/instance: minio
        app.kubernetes.io/name: minio
        app.kubernetes.io/part-of: minio
        component: minio
    spec:
      containers:
      - name: create-buckets
        image: image-registry.openshift-image-registry.svc:5000/redhat-ods-applications/s2i-generic-data-science-notebook:2023.1
        imagePullPolicy: IfNotPresent
        command:
          - /bin/bash
        env:
          - name: BUCKETNAME
            value: "single-model-bucket"
        envFrom:
          - secretRef:
              name: single-model-serving-ds-connection
        args:
          - -ec
          - |-
            oc get secret single-model-serving-ds-connection
            env | grep AWS_
            cat << 'EOF' | python3
            import boto3, os

            s3_endpoint = os.getenv("AWS_S3_ENDPOINT")
            bucket_name = '$(BUCKETNAME)'

            s3 = boto3.client("s3",
                              endpoint_url=s3_endpoint,
                              aws_access_key_id=os.getenv("AWS_ACCESS_KEY_ID"),
                              aws_secret_access_key=os.getenv("AWS_SECRET_ACCESS_KEY"))
            bucket = bucket_name
            print('creating ' + bucket + ' bucket in minio')
            if bucket not in [bu["Name"] for bu in s3.list_buckets()["Buckets"]]:
              s3.create_bucket(Bucket=bucket)
            EOF
      initContainers:
        - args:
            - -ec
            - |-
              echo -n 'Waiting for minio root user secret'
              while ! oc get secret single-model-serving-ds-connection 2>/dev/null | grep -qF single-model-serving-ds-connection; do
              echo -n .
              sleep 5
              done; echo
          command:
            - /bin/bash
          image: image-registry.openshift-image-registry.svc:5000/openshift/tools:latest
          imagePullPolicy: IfNotPresent
          name: wait-for-minio
      restartPolicy: Never
      serviceAccount: demo-setup
      serviceAccountName: demo-setup
