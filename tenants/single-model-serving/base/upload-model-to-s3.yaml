apiVersion: batch/v1
kind: Job
metadata:
  labels:
    app.kubernetes.io/component: minio
    app.kubernetes.io/instance: minio
    app.kubernetes.io/name: minio
    app.kubernetes.io/part-of: minio
    component: minio
  name: upload-model-to-s3
spec:
  selector: {}
  template:
    metadata:
      labels:
        app.kubernetes.io/component: minio
        app.kubernetes.io/instance: minio
        app.kubernetes.io/name: minio
        app.kubernetes.io/part-of: minio
        component: minio
    spec:
      containers:
        - name: upload-model-to-s3
          envFrom:
            - secretRef:
                name: single-model-serving-ds-connection
          image: image-registry.openshift-image-registry.svc:5000/redhat-ods-applications/s2i-generic-data-science-notebook:2023.1
          imagePullPolicy: IfNotPresent
          volumeMounts:
            - mountPath: /opt/app-root/src
              name: model-repo
          env:
          - name: PREFIX_PATH
            value: "models"
          - name: MODEL_PATH
            value: "$(PREFIX_PATH)/granite-3b-code-base"
          command:
            - /bin/bash
          args:
            - -ec
            - |-
              oc get secret single-model-serving-ds-connection
              env | grep AWS_
              cat << 'EOF' | python3
              import boto3, os, botocore

              bucket_name = os.getenv("AWS_S3_BUCKET")
              aws_access_key_id = os.environ.get('AWS_ACCESS_KEY_ID')
              aws_secret_access_key = os.environ.get('AWS_SECRET_ACCESS_KEY')
              endpoint_url = os.getenv("AWS_S3_ENDPOINT")
              region_name = os.environ.get('AWS_DEFAULT_REGION')

              session = boto3.session.Session(aws_access_key_id=aws_access_key_id,
                                  aws_secret_access_key=aws_secret_access_key)

              s3_resource = session.resource(
                  's3',
                  config=botocore.client.Config(signature_version='s3v4'),
                  endpoint_url=endpoint_url,
                  region_name=region_name)

              bucket = s3_resource.Bucket(bucket_name)

              local_directory = "$(MODEL_PATH)"
              s3_prefix = "$(MODEL_PATH)"


              print('uploading to s3')
              for root, dirs, files in os.walk(local_directory):
                for filename in files:
                    file_path = os.path.join(root, filename)
                    relative_path = os.path.relpath(file_path, local_directory)
                    if ".git" in relative_path:
                        continue
                    s3_key = os.path.join(s3_prefix, relative_path)
                    print(f"{file_path} -> {s3_key}")
                    bucket.upload_file(file_path, s3_key)

              prefix = "$(PREFIX_PATH)"
              filter = bucket.objects.filter(Prefix=prefix)
              for obj in filter.all():
                  print(obj.key)
              print('done')
              EOF
      initContainers:
        - name: wait-for-minio
          command:
            - /bin/bash
          args:
            - -ec
            - |-
              echo -n 'Waiting for minio root user secret'
              while ! oc get secret single-model-serving-ds-connection 2>/dev/null | grep -qF single-model-serving-ds-connection; do
              echo -n .
              sleep 5
              done; echo
              
              echo -n 'Waiting for minio deployment'
              while ! oc get deployment minio -n ai-example-training 2>/dev/null | grep -qF minio; do
                echo -n .
                sleep 5
              done; echo
              oc wait --for=condition=available --timeout=60s deployment/minio -n ai-example-training
              sleep 10
          image: image-registry.openshift-image-registry.svc:5000/openshift/tools:latest
          imagePullPolicy: IfNotPresent
        - name: git-cloner
          image: alpine/git
          args:
            - clone
            - --single-branch
            - --
            - https://huggingface.co/ibm-granite/granite-3b-code-base.git
            - /opt/app-root/src/models/granite-3b-code-base
          volumeMounts:
            - mountPath: /opt/app-root/src/
              name: model-repo
      volumes:
        - name: model-repo
          emptyDir: {}
      restartPolicy: Never
      serviceAccount: demo-setup
      serviceAccountName: demo-setup
